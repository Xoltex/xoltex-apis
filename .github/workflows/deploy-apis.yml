name: Create or Update API Gateway

on:
  push:
    branches:
      - main
    paths:
      - '*.yaml'

env:
  AWS_REGION: us-east-1

jobs:
  deploy_or_update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Instalar jq y yq
        run: curl -Lo /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq


      - name: Detectar archivo YAML y extraer nombre de API
        id: preparar
        run: |
          FILE=$(ls *.yaml | head -n 1)
          echo "📄 Archivo YAML detectado: $FILE"
          echo "api_file=$FILE" >> $GITHUB_OUTPUT

          NAME=$(yq eval '.info.title' "$FILE")
          echo "📛 Nombre de la API: $NAME"
          echo "api_name=$NAME" >> $GITHUB_OUTPUT

      - name: Verificar si la API ya existe
        id: buscar
        run: |
          NAME="${{ steps.preparar.outputs.api_name }}"
          ID=$(aws apigateway get-rest-apis \
            --query "items[?name=='$NAME'].id" \
            --output text \
            --region $AWS_REGION || true)

          if [ -z "$ID" ]; then
            echo "🆕 API no existe. Se creará."
            echo "found=false" >> $GITHUB_OUTPUT
          else
            echo "♻️ API existente encontrada con ID: $ID"
            echo "api_id=$ID" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Crear o actualizar la API
        id: procesar
        run: |
          FILE=${{ steps.preparar.outputs.api_file }}
          NAME=${{ steps.preparar.outputs.api_name }}
          REGION=$AWS_REGION

          if [ "${{ steps.buscar.outputs.found }}" = "false" ]; then
            echo "🚧 Creando nueva API '$NAME'"
            RESPONSE=$(aws apigateway import-rest-api \
              --body fileb://$FILE \
              --parameters endpointConfigurationTypes=REGIONAL \
              --region $REGION)
            echo "$RESPONSE" > response.json
            API_ID=$(jq -r '.id' response.json)
          else
            API_ID=${{ steps.buscar.outputs.api_id }}
            echo "🔄 Actualizando API '$NAME' con ID $API_ID"
            aws apigateway put-rest-api \
              --rest-api-id "$API_ID" \
              --mode overwrite \
              --body fileb://$FILE \
              --region $REGION
          fi

          echo "api_id=$API_ID" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Desplegar en stage prod
        run: |
          API_ID=${{ steps.procesar.outputs.api_id }}
          echo "🚀 Desplegando API ID: $API_ID en stage 'prod'"
          aws apigateway create-deployment \
            --rest-api-id "$API_ID" \
            --stage-name prod \
            --region $AWS_REGION
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
